//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "book_iden")]
pub struct Model {
    pub author: Option<i32>,
    #[sea_orm(primary_key)]
    pub book_id: i32,
    pub desc: Option<String>,
    pub icon_url: Option<String>,
    pub pubic: Option<bool>,
    pub published: Option<DateTime>,
    pub title: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::chapter_iden::Entity")]
    ChapterIden,
    #[sea_orm(
        belongs_to = "super::user_iden::Entity",
        from = "Column::Author",
        to = "super::user_iden::Column::UserId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    UserIden,
}

impl Related<super::chapter_iden::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChapterIden.def()
    }
}

impl Related<super::user_iden::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserIden.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
